[
    {
        "signature": "abs(number)",
        "summary": "Retorna o valor absoluto de `number`.",
        "detail": "",
        "examples": [
            {
                "template": "@(abs(-10))",
                "output": "10"
            },
            {
                "template": "@(abs(10.5))",
                "output": "10.5"
            },
            {
                "template": "@(abs(\"foo\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "and(values...)",
        "summary": "Retorna se todos os `values` dados s√£o verdadeiros.",
        "detail": "",
        "examples": [
            {
                "template": "@(and(true))",
                "output": "true"
            },
            {
                "template": "@(and(true, false, true))",
                "output": "false"
            }
        ]
    },
    {
        "signature": "array(values...)",
        "summary": " Toma multiplos `values` e retorna todos em uma matriz.",
        "detail": "",
        "examples": [
            {
                "template": "@(array(\"a\", \"b\", 356)[1])",
                "output": "b"
            },
            {
                "template": "@(join(array(\"a\", \"b\", \"c\"), \"|\"))",
                "output": "a|b|c"
            },
            {
                "template": "@(count(array()))",
                "output": "0"
            },
            {
                "template": "@(count(array(\"a\", \"b\")))",
                "output": "2"
            }
        ]
    },
    {
        "signature": "attachment_parts(attachment)",
        "summary": "Analisa um anexo em suas diferentes partes",
        "detail": "",
        "examples": [
            {
                "template": "@(attachment_parts(\"image/jpeg:https://example.com/test.jpg\"))",
                "output": "{content_type: image/jpeg, url: https://example.com/test.jpg}"
            }
        ]
    },
    {
        "signature": "boolean(value)",
        "summary": "Tenta converter `value` em um boleano.",
        "detail": "Um erro √© retornado se o valor n√£o puder ser convertido",
        "examples": [
            {
                "template": "@(boolean(array(1, 2)))",
                "output": "true"
            },
            {
                "template": "@(boolean(\"FALSE\"))",
                "output": "false"
            },
            {
                "template": "@(boolean(1 / 0))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "char(code)",
        "summary": "Retorna o caractere para o `code` UNICODE dado.",
        "detail": "Isso √© o inverso de [function:code]",
        "examples": [
            {
                "template": "@(char(33))",
                "output": "!"
            },
            {
                "template": "@(char(128512))",
                "output": "üòÄ"
            },
            {
                "template": "@(char(\"foo\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "clean(text)",
        "summary": "Remove quaisquer caracteres n√£o imprim√≠veis do `text`.",
        "detail": "",
        "examples": [
            {
                "template": "@(clean(\"üòÉ Hello \\nwo\\tr\\rld\"))",
                "output": "üòÉ Hello world"
            },
            {
                "template": "@(clean(123))",
                "output": "123"
            }
        ]
    },
    {
        "signature": "code(text)",
        "summary": "Retorna o c√≥digo UNICODE do primeiro caractere de `text`.",
        "detail": "Isso √© o inverso de [function:char]",
        "examples": [
            {
                "template": "@(code(\"a\"))",
                "output": "97"
            },
            {
                "template": "@(code(\"abc\"))",
                "output": "97"
            },
            {
                "template": "@(code(\"üòÄ\"))",
                "output": "128512"
            },
            {
                "template": "@(code(\"15\"))",
                "output": "49"
            },
            {
                "template": "@(code(15))",
                "output": "49"
            },
            {
                "template": "@(code(\"\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "count(value)",
        "summary": "Retorna o n√∫mero de items em uma matriz ou propriedades em um objeto.",
        "detail": "Isso retornar√° um erro se for passado um item que n√£o √© contabiliz√°vel.",
        "examples": [
            {
                "template": "@(count(contact.fields))",
                "output": "5"
            },
            {
                "template": "@(count(array()))",
                "output": "0"
            },
            {
                "template": "@(count(array(\"a\", \"b\", \"c\")))",
                "output": "3"
            },
            {
                "template": "@(count(1234))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "date(value)",
        "summary": "Tenta converter `value` em uma data.",
        "detail": "Se for texto, ent√£o isso ser√° analisado para uma data utilizando o formato padr√£o.\nUm erro √© retornado se o valor n√£o puder ser convertido.",
        "examples": [
            {
                "template": "@(date(\"1979-07-18\"))",
                "output": "1979-07-18"
            },
            {
                "template": "@(date(\"1979-07-18T10:30:45.123456Z\"))",
                "output": "1979-07-18"
            },
            {
                "template": "@(date(\"10/05/2010\"))",
                "output": "2010-05-10"
            },
            {
                "template": "@(date(\"NOT DATE\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "date_from_parts(year, month, day)",
        "summary": "Cria uma data a partir de um `year`, `month` e `day`.",
        "detail": "",
        "examples": [
            {
                "template": "@(date_from_parts(2017, 1, 15))",
                "output": "2017-01-15"
            },
            {
                "template": "@(date_from_parts(2017, 2, 31))",
                "output": "2017-03-03"
            },
            {
                "template": "@(date_from_parts(2017, 13, 15))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "datetime(value)",
        "summary": "Tenta converter `value` em uma datetime.",
        "detail": "Se for texto, ent√£o isso ser√° analisado para uma data/hora utilizando o formato padr√£o\ne formatos de tempo. Um erro √© retornado se o valor n√£o puder ser convertido.",
        "examples": [
            {
                "template": "@(datetime(\"1979-07-18\"))",
                "output": "1979-07-18T00:00:00.000000-05:00"
            },
            {
                "template": "@(datetime(\"1979-07-18T10:30:45.123456Z\"))",
                "output": "1979-07-18T10:30:45.123456Z"
            },
            {
                "template": "@(datetime(\"10/05/2010\"))",
                "output": "2010-05-10T00:00:00.000000-05:00"
            },
            {
                "template": "@(datetime(\"NOT DATE\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "datetime_add(datetime, offset, unit)",
        "summary": "Calcula o valor da data de entrada adicionada por `offset`, de numero de `unit` para `datetime`",
        "detail": "Dura√ß√µes v√°lidas s√£o \"Y\" para anos, \"M\" para meses, \"W\" para semanas, \"D\" para dias, \"h\" para hora,\n\"m\" para minutos, \"s\" para segundos",
        "examples": [
            {
                "template": "@(datetime_add(\"2017-01-15\", 5, \"D\"))",
                "output": "2017-01-20T00:00:00.000000-05:00"
            },
            {
                "template": "@(datetime_add(\"2017-01-15 10:45\", 30, \"m\"))",
                "output": "2017-01-15T11:15:00.000000-05:00"
            }
        ]
    },
    {
        "signature": "datetime_diff(date1, date2, unit)",
        "summary": "Retorna a dura√ß√£o entre `date1` e `date2` na `unit` especificada.",
        "detail": "Dura√ß√µes v√°lidas s√£o \"Y\" para anos, \"M\" para meses, \"W\" para semanas, \"D\" para dias, \"h\" para hora,\n\"m\" para minutos, \"s\" para segundos.",
        "examples": [
            {
                "template": "@(datetime_diff(\"2017-01-15\", \"2017-01-17\", \"D\"))",
                "output": "2"
            },
            {
                "template": "@(datetime_diff(\"2017-01-15\", \"2017-05-15\", \"W\"))",
                "output": "17"
            },
            {
                "template": "@(datetime_diff(\"2017-01-15\", \"2017-05-15\", \"M\"))",
                "output": "4"
            },
            {
                "template": "@(datetime_diff(\"2017-01-17 10:50\", \"2017-01-17 12:30\", \"h\"))",
                "output": "1"
            },
            {
                "template": "@(datetime_diff(\"2017-01-17\", \"2015-12-17\", \"Y\"))",
                "output": "-2"
            }
        ]
    },
    {
        "signature": "datetime_from_epoch(seconds)",
        "summary": "Converte o tempo de UNIX epoch em `seconds` para uma nova data",
        "detail": "",
        "examples": [
            {
                "template": "@(datetime_from_epoch(1497286619))",
                "output": "2017-06-12T11:56:59.000000-05:00"
            },
            {
                "template": "@(datetime_from_epoch(1497286619.123456))",
                "output": "2017-06-12T11:56:59.123456-05:00"
            }
        ]
    },
    {
        "signature": "default(value, default)",
        "summary": "Retorna `value` se n√£o for vazio ou erro, de outra forma retorna `default`.",
        "detail": "",
        "examples": [
            {
                "template": "@(default(undeclared.var, \"default_value\"))",
                "output": "default_value"
            },
            {
                "template": "@(default(\"10\", \"20\"))",
                "output": "10"
            },
            {
                "template": "@(default(\"\", \"value\"))",
                "output": "value"
            },
            {
                "template": "@(default(\"  \", \"value\"))",
                "output": "\\x20\\x20"
            },
            {
                "template": "@(default(datetime(\"invalid-date\"), \"today\"))",
                "output": "today"
            },
            {
                "template": "@(default(format_urn(\"invalid-urn\"), \"ok\"))",
                "output": "ok"
            }
        ]
    },
    {
        "signature": "epoch(date)",
        "summary": "Converte `date` para um UNIX epoch.",
        "detail": "O n√∫mero retornado pode conter segundos fracionados.",
        "examples": [
            {
                "template": "@(epoch(\"2017-06-12T16:56:59.000000Z\"))",
                "output": "1497286619"
            },
            {
                "template": "@(epoch(\"2017-06-12T18:56:59.000000+02:00\"))",
                "output": "1497286619"
            },
            {
                "template": "@(epoch(\"2017-06-12T16:56:59.123456Z\"))",
                "output": "1497286619.123456"
            },
            {
                "template": "@(round_down(epoch(\"2017-06-12T16:56:59.123456Z\")))",
                "output": "1497286619"
            }
        ]
    },
    {
        "signature": "extract(object, properties)",
        "summary": "Toma um objeto e extrai a propriedade nomeada.",
        "detail": "",
        "examples": [
            {
                "template": "@(extract(contact, \"name\"))",
                "output": "Ryan Lewis"
            },
            {
                "template": "@(extract(contact.groups[0], \"name\"))",
                "output": "Testers"
            }
        ]
    },
    {
        "signature": "extract_object(object, properties...)",
        "summary": "Toma um objeto e retorna um novo objeto extraindo somente as propriedades nomeadas.",
        "detail": "",
        "examples": [
            {
                "template": "@(extract_object(contact.groups[0], \"name\"))",
                "output": "{name: Testers}"
            }
        ]
    },
    {
        "signature": "field(text, index, delimiter)",
        "summary": "Divide `text` utilizando o dado `delimiter` e retorna o campo no `index`.",
        "detail": "O √≠ndice inicia em zero. Quando separando com um espa√ßo, o delimitador √© considerado para ser espa√ßos em branco.",
        "examples": [
            {
                "template": "@(field(\"a,b,c\", 1, \",\"))",
                "output": "b"
            },
            {
                "template": "@(field(\"a,,b,c\", 1, \",\"))",
                "output": ""
            },
            {
                "template": "@(field(\"a   b c\", 1, \" \"))",
                "output": "b"
            },
            {
                "template": "@(field(\"a\t\tb\tc\td\", 1, \"\t\"))",
                "output": ""
            },
            {
                "template": "@(field(\"a\\t\\tb\\tc\\td\", 1, \" \"))",
                "output": ""
            },
            {
                "template": "@(field(\"a,b,c\", \"foo\", \",\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "foreach(values, func, [args...])",
        "summary": "Cria uma nova matriz aplicando uma `func` para cada valor em `values`.",
        "detail": "Se a fun√ß√£o dada leva mais de um argumento, voc√™ pode passar argumentos adicionais ap√≥s a fun√ß√£o.",
        "examples": [
            {
                "template": "@(foreach(array(\"a\", \"b\", \"c\"), upper))",
                "output": "[A, B, C]"
            },
            {
                "template": "@(foreach(array(\"the man\", \"fox\", \"jumped up\"), word, 0))",
                "output": "[the, fox, jumped]"
            }
        ]
    },
    {
        "signature": "foreach_value(object, func, [args...])",
        "summary": "Cria um novo objeto aplicando uma `func` para cada valor de propriedade de `object`.",
        "detail": "Se a fun√ß√£o dada leva mais de um argumento, voc√™ pode passar argumentos adicionais ap√≥s a fun√ß√£o.",
        "examples": [
            {
                "template": "@(foreach_value(object(\"a\", \"x\", \"b\", \"y\"), upper))",
                "output": "{a: X, b: Y}"
            },
            {
                "template": "@(foreach_value(object(\"a\", \"hi there\", \"b\", \"good bye\"), word, 1))",
                "output": "{a: there, b: bye}"
            }
        ]
    },
    {
        "signature": "format(value)",
        "summary": "Formata `value` de acordo com o seu tipo.",
        "detail": "",
        "examples": [
            {
                "template": "@(format(1234.5670))",
                "output": "1,234.567"
            },
            {
                "template": "@(format(now()))",
                "output": "11-04-2018 13:24"
            },
            {
                "template": "@(format(today()))",
                "output": "11-04-2018"
            }
        ]
    },
    {
        "signature": "format_date(date, [,format])",
        "summary": "Formata `date` como texto de acordo com o `format` dado.",
        "detail": "Se `format` n√£o √© especificado ent√£o o formato padr√£o do ambiente √© utilizado. A string\npara formata√ß√£o pode ser contitu√≠da dos seguintes caracteres. Os caracteres ' ', ':', ',', 'T', '-'\ne '_' s√£o ignorados. Quaisquer outros caracteres s√£o um erro.\n\n* `YY`        - √∫ltimos dois d√≠gitos do ano 0-99\n* `YYYY`        - quatro d√≠gitos do ano 0000-9999\n* `M`        - m√™s 1-12\n* `MM`        - m√™s 01-12\n* `D`        - dia do m√™s, 1-31\n* `DD`        - dia do m√™s, preenchido com zeros 0-31",
        "examples": [
            {
                "template": "@(format_date(\"1979-07-18T15:00:00.000000Z\"))",
                "output": "18-07-1979"
            },
            {
                "template": "@(format_date(\"1979-07-18T15:00:00.000000Z\", \"YYYY-MM-DD\"))",
                "output": "1979-07-18"
            },
            {
                "template": "@(format_date(\"2010-05-10T19:50:00.000000Z\", \"YYYY M DD\"))",
                "output": "2010 5 10"
            },
            {
                "template": "@(format_date(\"1979-07-18T15:00:00.000000Z\", \"YYYY\"))",
                "output": "1979"
            },
            {
                "template": "@(format_date(\"1979-07-18T15:00:00.000000Z\", \"M\"))",
                "output": "7"
            },
            {
                "template": "@(format_date(\"NOT DATE\", \"YYYY-MM-DD\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "format_datetime(datetime [,format [,timezone]])",
        "summary": "Formata `datetime` para texto de acordo com o `format` dado",
        "detail": "Se `format` n√£o √© especificado ent√£o o formato padr√£o do ambiente √© utilizado. A string\npara formata√ß√£o pode ser contitu√≠da dos seguintes caracteres. Os caracteres ' ', ':', ',', 'T', '-'\ne '_' s√£o ignorados. Quaisquer outros caracteres s√£o um erro.\n\n* `YY`        - √∫ltimos dois d√≠gitos do ano 0-99\n* `YYYY`        - quatro d√≠gitos do ano 0000-9999\n* `M`        - m√™s 1-12\n* `MM`        - m√™s 01-12\n* `D`        - dia do m√™s, 1-31\n* `DD`        - dia do m√™s, preenchido com zeros 0-31\n* `h`        - hora do dia 1-12\n* `hh`        - hora do dia 01-12\n* `tt`        - hora do dia no formato de 24 horas 00-23\n* `m`        - minuto 0-59\n* `mm`        - minuto 00-59\n* `s`        - segundo 0-59\n* `ss`        - segundo 00-59\n* `fff`        - milissegundo\n* `ffffff`        - microssegundo\n* `fffffffff`        - nanossegundo\n* `aa`        - am ou pm\n* `AA`        - AM ou PM\n* `Z`        - off em hora e minutos do UTC, ou Z para UTC\n* `ZZZ`        - offset em hora e minutos do UTC\n\nFuso hor√°rio deve ser um nome da localiza√ß√£o como especificado no banco de dados de fuso hor√°rio da IANA, como\n\"America/Guayaquil\" ou \"America/Los_Angeles\". Se n√£o especificado, o fuso hor√°rio atual\nser√° utilizado. Um erro ser√° retornado se o fuso hor√°rio n√£o for reconhecido.",
        "examples": [
            {
                "template": "@(format_datetime(\"1979-07-18T15:00:00.000000Z\"))",
                "output": "18-07-1979 10:00"
            },
            {
                "template": "@(format_datetime(\"1979-07-18T15:00:00.000000Z\", \"YYYY-MM-DD\"))",
                "output": "1979-07-18"
            },
            {
                "template": "@(format_datetime(\"2010-05-10T19:50:00.000000Z\", \"YYYY M DD tt:mm\"))",
                "output": "2010 5 10 14:50"
            },
            {
                "template": "@(format_datetime(\"2010-05-10T19:50:00.000000Z\", \"YYYY-MM-DD hh:mm AA\", \"America/Los_Angeles\"))",
                "output": "2010-05-10 12:50 PM"
            },
            {
                "template": "@(format_datetime(\"1979-07-18T15:00:00.000000Z\", \"YYYY\"))",
                "output": "1979"
            },
            {
                "template": "@(format_datetime(\"1979-07-18T15:00:00.000000Z\", \"M\"))",
                "output": "7"
            },
            {
                "template": "@(format_datetime(\"NOT DATE\", \"YYYY-MM-DD\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "format_location(location)",
        "summary": "Formata uma `location` dada como seu nome.",
        "detail": "",
        "examples": [
            {
                "template": "@(format_location(\"Rwanda\"))",
                "output": "Rwanda"
            },
            {
                "template": "@(format_location(\"Rwanda > Kigali\"))",
                "output": "Kigali"
            }
        ]
    },
    {
        "signature": "format_number(number, places [, humanize])",
        "summary": "Formata `number` para um dado numero de `places` decimais",
        "detail": "Um terceiro argumento opcional `humanize` pode ser falso para desabilitar o uso de milhares de separadores.",
        "examples": [
            {
                "template": "@(format_number(1234))",
                "output": "1,234"
            },
            {
                "template": "@(format_number(1234.5670))",
                "output": "1,234.567"
            },
            {
                "template": "@(format_number(1234.5670, 2, true))",
                "output": "1,234.57"
            },
            {
                "template": "@(format_number(1234.5678, 0, false))",
                "output": "1235"
            },
            {
                "template": "@(format_number(\"foo\", 2, false))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "format_time(time [,format])",
        "summary": "Formata `time` para texto de acordo com o `format` dado.",
        "detail": "Se `format` n√£o √© especificado ent√£o o formato padr√£o do ambiente √© utilizado. A string\npara formata√ß√£o pode ser contitu√≠da dos seguintes caracteres. Os caracteres ' ', ':', ',', 'T', '-'\ne '_' s√£o ignorados. Quaisquer outros caracteres s√£o um erro.\n\n* `h`        - hora do dia 1-12\n* `hh`        - hora do dia 01-12\n* `tt`        - hora do dia no formato de 24 horas 00-23\n* `m`        - minuto 0-59\n* `mm`        - minuto 00-59\n* `s`        - segundo 0-59\n* `ss`        - segundo 00-59\n* `fff`        - milissegundo\n* `ffffff`        - microssegundo\n* `fffffffff`        - nanossegundo\n* `aa`        - am ou pm\n* `AA`        - AM ou PM",
        "examples": [
            {
                "template": "@(format_time(\"14:50:30.000000\"))",
                "output": "14:50"
            },
            {
                "template": "@(format_time(\"14:50:30.000000\", \"h:mm aa\"))",
                "output": "2:50 pm"
            },
            {
                "template": "@(format_time(\"15:00:27.000000\", \"s\"))",
                "output": "27"
            },
            {
                "template": "@(format_time(\"NOT TIME\", \"hh:mm\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "format_urn(urn)",
        "summary": "Formata `urn` para um texto amig√°vel.",
        "detail": "",
        "examples": [
            {
                "template": "@(format_urn(\"tel:+250781234567\"))",
                "output": "0781 234 567"
            },
            {
                "template": "@(format_urn(\"twitter:134252511151#billy_bob\"))",
                "output": "billy_bob"
            },
            {
                "template": "@(format_urn(contact.urn))",
                "output": "(202) 456-1111"
            },
            {
                "template": "@(format_urn(urns.tel))",
                "output": "(202) 456-1111"
            },
            {
                "template": "@(format_urn(urns.mailto))",
                "output": "foo@bar.com"
            },
            {
                "template": "@(format_urn(\"NOT URN\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "html_decode(text)",
        "summary": "HTML decodifica `text`",
        "detail": "",
        "examples": [
            {
                "template": "@(html_decode(\"Red &amp; Blue\"))",
                "output": "Red & Blue"
            },
            {
                "template": "@(html_decode(\"5 + 10\"))",
                "output": "5 + 10"
            }
        ]
    },
    {
        "signature": "if(test, value1, value2)",
        "summary": "Retorna `value1` se `test` √© verdadeiro ou `value2` caso contr√°rio.",
        "detail": "Se o primeiro argumento √© um erro, esse √© retornado.",
        "examples": [
            {
                "template": "@(if(1 = 1, \"foo\", \"bar\"))",
                "output": "foo"
            },
            {
                "template": "@(if(\"foo\" > \"bar\", \"foo\", \"bar\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "is_error(value)",
        "summary": "Retorna se `value` √© um erro.",
        "detail": "",
        "examples": [
            {
                "template": "@(is_error(datetime(\"foo\")))",
                "output": "true"
            },
            {
                "template": "@(is_error(run.not.existing))",
                "output": "true"
            },
            {
                "template": "@(is_error(\"hello\"))",
                "output": "false"
            }
        ]
    },
    {
        "signature": "join(array, separator)",
        "summary": "Junta o `array` dado de strings com o `separator` para fazer o texto.",
        "detail": "",
        "examples": [
            {
                "template": "@(join(array(\"a\", \"b\", \"c\"), \"|\"))",
                "output": "a|b|c"
            },
            {
                "template": "@(join(split(\"a.b.c\", \".\"), \" \"))",
                "output": "a b c"
            }
        ]
    },
    {
        "signature": "json(value)",
        "summary": "Retorna a representa√ß√£o em JSON de `value`.",
        "detail": "",
        "examples": [
            {
                "template": "@(json(\"string\"))",
                "output": "\"string\""
            },
            {
                "template": "@(json(10))",
                "output": "10"
            },
            {
                "template": "@(json(null))",
                "output": "null"
            },
            {
                "template": "@(json(contact.uuid))",
                "output": "\"5d76d86b-3bb9-4d5a-b822-c9d86f5d8e4f\""
            }
        ]
    },
    {
        "signature": "lower(text)",
        "summary": "Converte `text` para min√∫sculo.",
        "detail": "",
        "examples": [
            {
                "template": "@(lower(\"HellO\"))",
                "output": "hello"
            },
            {
                "template": "@(lower(\"hello\"))",
                "output": "hello"
            },
            {
                "template": "@(lower(\"123\"))",
                "output": "123"
            },
            {
                "template": "@(lower(\"üòÄ\"))",
                "output": "üòÄ"
            }
        ]
    },
    {
        "signature": "max(numbers...)",
        "summary": "Retorna o maior valor em `numbers`.",
        "detail": "",
        "examples": [
            {
                "template": "@(max(1, 2))",
                "output": "2"
            },
            {
                "template": "@(max(1, -1, 10))",
                "output": "10"
            },
            {
                "template": "@(max(1, 10, \"foo\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "mean(numbers...)",
        "summary": "Retorna a m√©dia aritim√©tica dos `numbers`.",
        "detail": "",
        "examples": [
            {
                "template": "@(mean(1, 2))",
                "output": "1.5"
            },
            {
                "template": "@(mean(1, 2, 6))",
                "output": "3"
            },
            {
                "template": "@(mean(1, \"foo\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "min(numbers...)",
        "summary": "Retorna o menor valor em `numbers`.",
        "detail": "",
        "examples": [
            {
                "template": "@(min(1, 2))",
                "output": "1"
            },
            {
                "template": "@(min(2, 2, -10))",
                "output": "-10"
            },
            {
                "template": "@(min(1, 2, \"foo\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "mod(dividend, divisor)",
        "summary": "Retorna o resto da divis√£o de `dividend` pelo `divisor`.",
        "detail": "",
        "examples": [
            {
                "template": "@(mod(5, 2))",
                "output": "1"
            },
            {
                "template": "@(mod(4, 2))",
                "output": "0"
            },
            {
                "template": "@(mod(5, \"foo\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "now()",
        "summary": "Retorna a data atual e o tempo no fuso hor√°rio atual.",
        "detail": "",
        "examples": [
            {
                "template": "@(now())",
                "output": "2018-04-11T13:24:30.123456-05:00"
            }
        ]
    },
    {
        "signature": "number(value)",
        "summary": "Tenta converter `value` em um n√∫mero.",
        "detail": "Um erro √© retornado se o valor n√£o puder ser convertido",
        "examples": [
            {
                "template": "@(number(10))",
                "output": "10"
            },
            {
                "template": "@(number(\"123.45000\"))",
                "output": "123.45"
            },
            {
                "template": "@(number(\"what?\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "object(pairs...)",
        "summary": "Toma os pares de nome da propriedade e valor e retorna como um novo objeto.",
        "detail": "",
        "examples": [
            {
                "template": "@(object())",
                "output": "{}"
            },
            {
                "template": "@(object(\"a\", 123, \"b\", \"hello\"))",
                "output": "{a: 123, b: hello}"
            },
            {
                "template": "@(object(\"a\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "or(values...)",
        "summary": "Retorna se algum dos valores em `values` √© verdadeiro.",
        "detail": "",
        "examples": [
            {
                "template": "@(or(true))",
                "output": "true"
            },
            {
                "template": "@(or(true, false, true))",
                "output": "true"
            }
        ]
    },
    {
        "signature": "parse_datetime(text, format [,timezone])",
        "summary": "Analisa o `text` em uma data usando um `format` dado.",
        "detail": "A string\npara formata√ß√£o pode ser contitu√≠da dos seguintes caracteres. Os caracteres ' ', ':', ',', 'T', '-'\ne '_' s√£o ignorados. Quaisquer outros caracteres s√£o um erro.\n\n* `YY`        - √∫ltimos dois d√≠gitos do ano 0-99\n* `YYYY`        - quatro d√≠gitos do ano 0000-9999\n* `M`        - m√™s 1-12\n* `MM`        - m√™s 01-12\n* `D`        - dia do m√™s, 1-31\n* `DD`        - dia do m√™s, preenchido com zeros 0-31\n* `h`        - hora do dia 1-12\n* `hh`        - hora do dia 01-12\n* `tt`        - hora do dia no formato de 24 horas 00-23\n* `m`        - minuto 0-59\n* `mm`        - minuto 00-59\n* `s`        - segundo 0-59\n* `ss`        - segundo 00-59\n* `fff`        - milissegundo\n* `ffffff`        - microssegundo\n* `fffffffff`        - nanossegundo\n* `aa`        - am ou pm\n* `AA`        - AM ou PM\n* `Z`        - off em hora e minutos do UTC, ou Z para UTC\n* `ZZZ`        - offset em hora e minutos do UTC\n\nFuso hor√°rio deve ser um nome da localiza√ß√£o como especificado no banco de dados de fuso hor√°rio da IANA, como\n\"America/Guayaquil\" ou \"America/Los_Angeles\". Se n√£o especificado, o fuso hor√°rio atual\nser√° utilizado. Um erro ser√° retornado se o fuso hor√°rio n√£o for reconhecido.\n\nNote que os segundos fracionados ser√£o analisados mesmo sem um identificador de formato expl√≠cito.\nVoc√™ deve somente especificar os segundos fracionados quando quer garantir o numero de lugares\nno formato de entrada.\n\nparse_datetime ir√° retornar um erro se n√£o for capaz de converter o texto em um datetime.",
        "examples": [
            {
                "template": "@(parse_datetime(\"1979-07-18\", \"YYYY-MM-DD\"))",
                "output": "1979-07-18T00:00:00.000000-05:00"
            },
            {
                "template": "@(parse_datetime(\"2010 5 10\", \"YYYY M DD\"))",
                "output": "2010-05-10T00:00:00.000000-05:00"
            },
            {
                "template": "@(parse_datetime(\"2010 5 10 12:50\", \"YYYY M DD tt:mm\", \"America/Los_Angeles\"))",
                "output": "2010-05-10T12:50:00.000000-07:00"
            },
            {
                "template": "@(parse_datetime(\"NOT DATE\", \"YYYY-MM-DD\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "parse_json(text)",
        "summary": "Tenta analisar `text` como um JSON.",
        "detail": "Se o texto dado n√£o √© um JSON v√°lido, ent√£o um erro √© retornado.",
        "examples": [
            {
                "template": "@(parse_json(\"{\\\"foo\\\": \\\"bar\\\"}\").foo)",
                "output": "bar"
            },
            {
                "template": "@(parse_json(\"[1,2,3,4]\")[2])",
                "output": "3"
            },
            {
                "template": "@(parse_json(\"invalid json\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "parse_time(text, format)",
        "summary": "Analisa o `text` em um tempo usando o `format` dado.",
        "detail": "A string\npara formata√ß√£o pode ser contitu√≠da dos seguintes caracteres. Os caracteres ' ', ':', ',', 'T', '-'\ne '_' s√£o ignorados. Quaisquer outros caracteres s√£o um erro.\n\n* `h`        - hora do dia 1-12\n* `hh`        - hora do dia 01-12\n* `tt`        - hora do dia no formato de 24 horas 00-23\n* `m`        - minuto 0-59\n* `mm`        - minuto 00-59\n* `s`        - segundo 0-59\n* `ss`        - segundo 00-59\n* `fff`        - milissegundo\n* `ffffff`        - microssegundo\n* `fffffffff`        - nanossegundo\n* `aa`        - am ou pm\n* `AA`        - AM ou PM\n\nNote que os segundos fracionados ser√£o analisados mesmo sem um identificador de formato expl√≠cito.\nVoc√™ deve somente especificar os segundos fracionados quando quer garantir o numero de lugares\nno formato de entrada.\n\nparse_datetime ir√° retornar um erro se n√£o for capaz de converter o texto em um datetime.",
        "examples": [
            {
                "template": "@(parse_time(\"15:28\", \"tt:mm\"))",
                "output": "15:28:00.000000"
            },
            {
                "template": "@(parse_time(\"2:40 pm\", \"h:mm aa\"))",
                "output": "14:40:00.000000"
            },
            {
                "template": "@(parse_time(\"NOT TIME\", \"tt:mm\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "percent(number)",
        "summary": "Formata `number` como uma porcentagem.",
        "detail": "",
        "examples": [
            {
                "template": "@(percent(0.54234))",
                "output": "54%"
            },
            {
                "template": "@(percent(1.2))",
                "output": "120%"
            },
            {
                "template": "@(percent(\"foo\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "rand()",
        "summary": "Retorna um n√∫mero √∫nico aleat√≥rio entre [0.0-1.0).",
        "detail": "",
        "examples": [
            {
                "template": "@(rand())",
                "output": "0.6075520156746239"
            },
            {
                "template": "@(rand())",
                "output": "0.48467757094734026"
            }
        ]
    },
    {
        "signature": "rand_between()",
        "summary": "Um n√∫mero aleat√≥rio simples no intervalo fornecido.",
        "detail": "",
        "examples": [
            {
                "template": "@(rand_between(1, 10))",
                "output": "10"
            },
            {
                "template": "@(rand_between(1, 10))",
                "output": "2"
            }
        ]
    },
    {
        "signature": "read_chars(text)",
        "summary": "Converte `text` em algo que pode ser lido por sistemas IVR.",
        "detail": "ReadChars ir√° dividir os n√∫meros de forma que fiquem f√°ceis de entender. Isso inclui\ndividor em 3s ou 4s se apropriado.",
        "examples": [
            {
                "template": "@(read_chars(\"1234\"))",
                "output": "1 2 3 4"
            },
            {
                "template": "@(read_chars(\"abc\"))",
                "output": "a b c"
            },
            {
                "template": "@(read_chars(\"abcdef\"))",
                "output": "a b c , d e f"
            }
        ]
    },
    {
        "signature": "regex_match(text, pattern [,group])",
        "summary": "Retorna a primeira correspond√™ncia da express√£o regular `pattern` no `text`.",
        "detail": "Um terceiro argumento opcional `group` determina qual grupo correspondente ser√° retornado.",
        "examples": [
            {
                "template": "@(regex_match(\"sda34dfddg67\", \"\\d+\"))",
                "output": "34"
            },
            {
                "template": "@(regex_match(\"Bob Smith\", \"(\\w+) (\\w+)\", 1))",
                "output": "Bob"
            },
            {
                "template": "@(regex_match(\"Bob Smith\", \"(\\w+) (\\w+)\", 2))",
                "output": "Smith"
            },
            {
                "template": "@(regex_match(\"Bob Smith\", \"(\\w+) (\\w+)\", 5))",
                "output": "ERROR"
            },
            {
                "template": "@(regex_match(\"abc\", \"[\\.\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "remove_first_word(text)",
        "summary": "Remove a primeira palavra do `text`.",
        "detail": "",
        "examples": [
            {
                "template": "@(remove_first_word(\"foo bar\"))",
                "output": "bar"
            },
            {
                "template": "@(remove_first_word(\"Hi there. I'm a flow!\"))",
                "output": "there. I'm a flow!"
            }
        ]
    },
    {
        "signature": "repeat(text, count)",
        "summary": "Retorna `text` repetido `count` n√∫mero de vezes.",
        "detail": "",
        "examples": [
            {
                "template": "@(repeat(\"*\", 8))",
                "output": "********"
            },
            {
                "template": "@(repeat(\"*\", \"foo\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "replace(text, needle, replacement [, count])",
        "summary": "Substitui at√© em at√© `count` ocorr√™ncias de `needle` por `replacement` em `text`.",
        "detail": "If `count` √© omitido ou menor do que 0, ent√£o todas as ocorr√™ncias ser√£o substitu√≠das.",
        "examples": [
            {
                "template": "@(replace(\"foo bar foo\", \"foo\", \"zap\"))",
                "output": "zap bar zap"
            },
            {
                "template": "@(replace(\"foo bar foo\", \"foo\", \"zap\", 1))",
                "output": "zap bar foo"
            },
            {
                "template": "@(replace(\"foo bar\", \"baz\", \"zap\"))",
                "output": "foo bar"
            }
        ]
    },
    {
        "signature": "replace_time(datetime)",
        "summary": "Retorna um novo datetime com a parte do tempo substitu√≠da pelo `time`.",
        "detail": "",
        "examples": [
            {
                "template": "@(replace_time(now(), \"10:30\"))",
                "output": "2018-04-11T10:30:00.000000-05:00"
            },
            {
                "template": "@(replace_time(\"2017-01-15\", \"10:30\"))",
                "output": "2017-01-15T10:30:00.000000-05:00"
            },
            {
                "template": "@(replace_time(\"foo\", \"10:30\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "round(number [,places])",
        "summary": "Arredonda `number` para o valor mais pr√≥ximo.",
        "detail": "Voc√™ pode, opcionalmente, passar o numero de casas decimais para arredondar como `places`. Se `places` < 0,\nele ir√° arrendondar para a parte inteira do mais pr√≥xido 10^(-casas).",
        "examples": [
            {
                "template": "@(round(12))",
                "output": "12"
            },
            {
                "template": "@(round(12.141))",
                "output": "12"
            },
            {
                "template": "@(round(12.6))",
                "output": "13"
            },
            {
                "template": "@(round(12.141, 2))",
                "output": "12.14"
            },
            {
                "template": "@(round(12.146, 2))",
                "output": "12.15"
            },
            {
                "template": "@(round(12.146, -1))",
                "output": "10"
            },
            {
                "template": "@(round(\"notnum\", 2))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "round_down(number [,places])",
        "summary": "Arredonda `number` para o n√∫mero inteiro inferior mais pr√≥ximo.",
        "detail": "Voc√™ pode, opcionalmente, passar o n√∫mero de casas decimais para arredondar como `places`.",
        "examples": [
            {
                "template": "@(round_down(12))",
                "output": "12"
            },
            {
                "template": "@(round_down(12.141))",
                "output": "12"
            },
            {
                "template": "@(round_down(12.6))",
                "output": "12"
            },
            {
                "template": "@(round_down(12.141, 2))",
                "output": "12.14"
            },
            {
                "template": "@(round_down(12.146, 2))",
                "output": "12.14"
            },
            {
                "template": "@(round_down(\"foo\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "round_up(number [,places])",
        "summary": "Arredonda `number` para o inteiro superior mais pr√≥ximo.",
        "detail": "Voc√™ pode, opcionalmente, passar o n√∫mero de casas decimais para arredondar como `places`.",
        "examples": [
            {
                "template": "@(round_up(12))",
                "output": "12"
            },
            {
                "template": "@(round_up(12.141))",
                "output": "13"
            },
            {
                "template": "@(round_up(12.6))",
                "output": "13"
            },
            {
                "template": "@(round_up(12.141, 2))",
                "output": "12.15"
            },
            {
                "template": "@(round_up(12.146, 2))",
                "output": "12.15"
            },
            {
                "template": "@(round_up(\"foo\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "split(text, [,delimiters])",
        "summary": "Divide `text` em uma matriz com palavras separadas.",
        "detail": "Valores vazios s√£o removidos por uma lista retornada. H√° um par√¢metro final opcional `delimiters`  que\n√© uma cadeia de caracteres utilizada para dividir o texto em palavras.",
        "examples": [
            {
                "template": "@(split(\"a b c\"))",
                "output": "[a, b, c]"
            },
            {
                "template": "@(split(\"a\", \" \"))",
                "output": "[a]"
            },
            {
                "template": "@(split(\"abc..d\", \".\"))",
                "output": "[abc, d]"
            },
            {
                "template": "@(split(\"a.b.c.\", \".\"))",
                "output": "[a, b, c]"
            },
            {
                "template": "@(split(\"a|b,c  d\", \" .|,\"))",
                "output": "[a, b, c, d]"
            }
        ]
    },
    {
        "signature": "text(value)",
        "summary": "Tenta converter `value` em um texto.",
        "detail": "Um erro √© retornado se o valor n√£o puder ser convertido",
        "examples": [
            {
                "template": "@(text(3 = 3))",
                "output": "true"
            },
            {
                "template": "@(json(text(123.45)))",
                "output": "\"123.45\""
            },
            {
                "template": "@(text(1 / 0))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "text_compare(text1, text2)",
        "summary": "Retorna a ordem de dicion√°rio de `text1` e `text2`.",
        "detail": "O valor de retorno ser√° -1 se `text1` vier antes de `text2`, 0 se forem iguais\ne 1 se `text1` vier depois de `text2`.",
        "examples": [
            {
                "template": "@(text_compare(\"abc\", \"abc\"))",
                "output": "0"
            },
            {
                "template": "@(text_compare(\"abc\", \"def\"))",
                "output": "-1"
            },
            {
                "template": "@(text_compare(\"zzz\", \"aaa\"))",
                "output": "1"
            }
        ]
    },
    {
        "signature": "text_length(value)",
        "summary": "Retorna o tamanho (n√∫mero de caracteres) de `value` quando convertido em texto.",
        "detail": "",
        "examples": [
            {
                "template": "@(text_length(\"abc\"))",
                "output": "3"
            },
            {
                "template": "@(text_length(array(2, 3)))",
                "output": "6"
            }
        ]
    },
    {
        "signature": "text_slice(text, start [, end])",
        "summary": "Retorna a por√ß√£o de `text` entre `start` (inclusivo) e `end` (exclusivo).",
        "detail": "Se o `end` n√£o foi especificado, ent√£o todo o resto de `text` ser√° incluido. Valores negativos\npara `start` ou `end`, come√ßar√£o no final do `text`.",
        "examples": [
            {
                "template": "@(text_slice(\"hello\", 2))",
                "output": "llo"
            },
            {
                "template": "@(text_slice(\"hello\", 1, 3))",
                "output": "el"
            },
            {
                "template": "@(text_slice(\"helloüòÅ\", -3, -1))",
                "output": "lo"
            },
            {
                "template": "@(text_slice(\"hello\", 7))",
                "output": ""
            }
        ]
    },
    {
        "signature": "time(value)",
        "summary": "Tenta converter `value` em um tempo.",
        "detail": "Se for texto, ent√£o ser√° analisado para um tempo utilizando o formato padr√£o.\nUm erro √© retornado se o valor n√£o puder ser convertido.",
        "examples": [
            {
                "template": "@(time(\"10:30\"))",
                "output": "10:30:00.000000"
            },
            {
                "template": "@(time(\"10:30:45 PM\"))",
                "output": "22:30:45.000000"
            },
            {
                "template": "@(time(datetime(\"1979-07-18T10:30:45.123456Z\")))",
                "output": "10:30:45.123456"
            },
            {
                "template": "@(time(\"what?\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "time_from_parts(hour, minute, second)",
        "summary": "Cria um tempo a partir de `hour`, `minute` e `second`",
        "detail": "",
        "examples": [
            {
                "template": "@(time_from_parts(14, 40, 15))",
                "output": "14:40:15.000000"
            },
            {
                "template": "@(time_from_parts(8, 10, 0))",
                "output": "08:10:00.000000"
            },
            {
                "template": "@(time_from_parts(25, 0, 0))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "title(text)",
        "summary": "Deixa com letra mai√∫scula cada palavra em `text`.",
        "detail": "",
        "examples": [
            {
                "template": "@(title(\"foo\"))",
                "output": "Foo"
            },
            {
                "template": "@(title(\"ryan lewis\"))",
                "output": "Ryan Lewis"
            },
            {
                "template": "@(title(\"RYAN LEWIS\"))",
                "output": "Ryan Lewis"
            },
            {
                "template": "@(title(123))",
                "output": "123"
            }
        ]
    },
    {
        "signature": "today()",
        "summary": "Retorna a data atual no fuso hor√°rio do ambiente.",
        "detail": "",
        "examples": [
            {
                "template": "@(today())",
                "output": "2018-04-11"
            }
        ]
    },
    {
        "signature": "trim(text, [,chars])",
        "summary": "Remove espa√ßo em branco de qualquer uma das extremidades do `text`.",
        "detail": "Existe um par√¢metro final opcional `chars` que √© uma string de caracters a serem removidos ao inv√©s de espa√ßos em branco.",
        "examples": [
            {
                "template": "@(trim(\" hello world    \"))",
                "output": "hello world"
            },
            {
                "template": "@(trim(\"+123157568\", \"+\"))",
                "output": "123157568"
            }
        ]
    },
    {
        "signature": "trim_left(text, [,chars])",
        "summary": "Remove espa√ßo em branco do come√ßo do `text`.",
        "detail": "Existe um par√¢metro final opcional `chars` que √© uma string de caracters a serem removidos ao inv√©s de espa√ßos em branco.",
        "examples": [
            {
                "template": "@(\"*\" & trim_left(\" hello world   \") & \"*\")",
                "output": "*hello world   *"
            },
            {
                "template": "@(trim_left(\"+12345+\", \"+\"))",
                "output": "12345+"
            }
        ]
    },
    {
        "signature": "trim_right(text, [,chars])",
        "summary": "Remove espa√ßo em branco do final do `text`.",
        "detail": "Existe um par√¢metro final opcional `chars` que √© uma string de caracters a serem removidos ao inv√©s de espa√ßos em branco.",
        "examples": [
            {
                "template": "@(\"*\" & trim_right(\" hello world   \") & \"*\")",
                "output": "* hello world*"
            },
            {
                "template": "@(trim_right(\"+12345+\", \"+\"))",
                "output": "+12345"
            }
        ]
    },
    {
        "signature": "tz(date)",
        "summary": "Retorna o nome do fuso hor√°rio de `date`.",
        "detail": "Se n√£o existe informa√ß√£o presente de fuso hor√°rio na data, ent√£o o fuso hor√°rio atual ser√° retornado.",
        "examples": [
            {
                "template": "@(tz(\"2017-01-15T02:15:18.123456Z\"))",
                "output": "UTC"
            },
            {
                "template": "@(tz(\"2017-01-15 02:15:18PM\"))",
                "output": "America/Guayaquil"
            },
            {
                "template": "@(tz(\"2017-01-15\"))",
                "output": "America/Guayaquil"
            },
            {
                "template": "@(tz(\"foo\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "tz_offset(date)",
        "summary": "Retorna o offset do fuso hor√°rio de `date`.",
        "detail": "O offset √© retornado no formato `[+/-]HH:MM`. Se nenhuma informa√ß√£o de fuso hor√°rio  est√° presente na data, \nent√£o o offset do fuso hor√°rio atual ser√° retornado.",
        "examples": [
            {
                "template": "@(tz_offset(\"2017-01-15T02:15:18.123456Z\"))",
                "output": "+0000"
            },
            {
                "template": "@(tz_offset(\"2017-01-15 02:15:18PM\"))",
                "output": "-0500"
            },
            {
                "template": "@(tz_offset(\"2017-01-15\"))",
                "output": "-0500"
            },
            {
                "template": "@(tz_offset(\"foo\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "upper(text)",
        "summary": "Converte `text` para mai√∫sculo.",
        "detail": "",
        "examples": [
            {
                "template": "@(upper(\"Asdf\"))",
                "output": "ASDF"
            },
            {
                "template": "@(upper(123))",
                "output": "123"
            }
        ]
    },
    {
        "signature": "url_encode(text)",
        "summary": "Codifica o `text` para ser usado como uma URL de par√¢metro.",
        "detail": "",
        "examples": [
            {
                "template": "@(url_encode(\"two & words\"))",
                "output": "two%20%26%20words"
            },
            {
                "template": "@(url_encode(10))",
                "output": "10"
            }
        ]
    },
    {
        "signature": "urn_parts(urn)",
        "summary": "Analise uma URN em suas diferentes partes",
        "detail": "",
        "examples": [
            {
                "template": "@(urn_parts(\"tel:+593979012345\"))",
                "output": "{display: , path: +593979012345, scheme: tel}"
            },
            {
                "template": "@(urn_parts(\"twitterid:3263621177#bobby\"))",
                "output": "{display: bobby, path: 3263621177, scheme: twitterid}"
            },
            {
                "template": "@(urn_parts(\"not a urn\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "week_number(date)",
        "summary": "Retorna o n√∫mero da semana (1-54) de `date`.",
        "detail": "A semana √© considerada para come√ßar no Domingo e a semana contendo 1.¬∫ de Janeiro √© a semana de n√∫mero 1.",
        "examples": [
            {
                "template": "@(week_number(\"2019-01-01\"))",
                "output": "1"
            },
            {
                "template": "@(week_number(\"2019-07-23T16:56:59.000000Z\"))",
                "output": "30"
            },
            {
                "template": "@(week_number(\"xx\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "weekday(date)",
        "summary": "Retorna o dia da semana para `date`.",
        "detail": "A semana √© considerada para iniciar no Domingo, ent√£o Domingo retorna 0, Segunda retorna 1 etc.",
        "examples": [
            {
                "template": "@(weekday(\"2017-01-15\"))",
                "output": "0"
            },
            {
                "template": "@(weekday(\"foo\"))",
                "output": "ERROR"
            }
        ]
    },
    {
        "signature": "word(text, index [,delimiters])",
        "summary": "Retorna a palavra em um `index` no `text`.",
        "detail": "√çndices come√ßam em zero. H√° um par√¢metro final opcional `delimiters` que\n√© uma cadeia de caracteres usada para separar o texto em palavras.",
        "examples": [
            {
                "template": "@(word(\"bee cat dog\", 0))",
                "output": "bee"
            },
            {
                "template": "@(word(\"bee.cat,dog\", 0))",
                "output": "bee"
            },
            {
                "template": "@(word(\"bee.cat,dog\", 1))",
                "output": "cat"
            },
            {
                "template": "@(word(\"bee.cat,dog\", 2))",
                "output": "dog"
            },
            {
                "template": "@(word(\"bee.cat,dog\", -1))",
                "output": "dog"
            },
            {
                "template": "@(word(\"bee.cat,dog\", -2))",
                "output": "cat"
            },
            {
                "template": "@(word(\"bee.*cat,dog\", 1, \".*=|\"))",
                "output": "cat,dog"
            },
            {
                "template": "@(word(\"O'Grady O'Flaggerty\", 1, \" \"))",
                "output": "O'Flaggerty"
            }
        ]
    },
    {
        "signature": "word_count(text [,delimiters])",
        "summary": "Retorna o n√∫mero de palavras em `text`.",
        "detail": "Existe um par√¢metro final opcional `delimiters` que √© uma string de caracteres utilizada\npara dividir o texto em palavras. ",
        "examples": [
            {
                "template": "@(word_count(\"foo bar\"))",
                "output": "2"
            },
            {
                "template": "@(word_count(10))",
                "output": "1"
            },
            {
                "template": "@(word_count(\"\"))",
                "output": "0"
            },
            {
                "template": "@(word_count(\"üòÄüòÉüòÑüòÅ\"))",
                "output": "4"
            },
            {
                "template": "@(word_count(\"bee.*cat,dog\", \".*=|\"))",
                "output": "2"
            },
            {
                "template": "@(word_count(\"O'Grady O'Flaggerty\", \" \"))",
                "output": "2"
            }
        ]
    },
    {
        "signature": "word_slice(text, start, end [,delimiters])",
        "summary": "Extrai uma sub sequ√™ncia de palavras de `text`.",
        "detail": "As palavras retornadas s√£o aquelas de `start` at√©, mas n√£o incluindo, `end`. √çndices come√ßam no zero e um valor final\nnegativo significa que todas as palavras ap√≥s o in√≠cio devem ser retornadas. Existe um par√¢metro final opcional `delimiter`\nque √© uma string com caracteres utilizados para dividir o texto em palavras.",
        "examples": [
            {
                "template": "@(word_slice(\"bee cat dog\", 0, 1))",
                "output": "bee"
            },
            {
                "template": "@(word_slice(\"bee cat dog\", 0, 2))",
                "output": "bee cat"
            },
            {
                "template": "@(word_slice(\"bee cat dog\", 1, -1))",
                "output": "cat dog"
            },
            {
                "template": "@(word_slice(\"bee cat dog\", 1))",
                "output": "cat dog"
            },
            {
                "template": "@(word_slice(\"bee cat dog\", 2, 3))",
                "output": "dog"
            },
            {
                "template": "@(word_slice(\"bee cat dog\", 3, 10))",
                "output": ""
            },
            {
                "template": "@(word_slice(\"bee.*cat,dog\", 1, -1, \".*=|,\"))",
                "output": "cat dog"
            },
            {
                "template": "@(word_slice(\"O'Grady O'Flaggerty\", 1, 2, \" \"))",
                "output": "O'Flaggerty"
            }
        ]
    }
]